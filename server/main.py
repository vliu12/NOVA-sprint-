import openai
from cartesia import Cartesia
from cartesia.tts import OutputFormat_Raw, TtsRequestVoiceSpecifier_Id
import os
import json
from dotenv import load_dotenv

load_dotenv()  

openai.api_key = os.getenv("OPENAI_API_KEY")  # Load OpenAI API key
cartesia_api_key = os.getenv("CARTESIA_API_KEY")  # Load Cartesia API key

# Check if the keys are successfully loaded
if not openai.api_key or not cartesia_api_key:
    print("Error: API keys are not set correctly in the .env file.")
    exit()

# Initialize Cartesia client with the loaded API key
cartesia_client = Cartesia(api_key_header=cartesia_api_key)

# Function to generate meditation script using ChatGPT
def generate_meditation_script(speed, emotion, language):
    prompt = f"Generate a {speed} paced guided meditation with a {emotion} mood in {language}. Include relaxing phrases and meditation guidance."
    
    response = openai.ChatCompletion.create(
        model="gpt-4",  # You can use gpt-3.5 if you prefer, but gpt-4 is recommended
        messages=[{"role": "user", "content": prompt}],
    )
    
    # Extract the response text
    meditation_script = response['choices'][0]['message']['content']
    return meditation_script

# Function to convert meditation script to audio using Cartesia's TTS API
def get_meditation_audio(meditation_script):
    try:
        # Call Cartesia TTS API with the generated script
        response = cartesia_client.tts.sse(
            model_id="your_model_id",  # Use the correct model ID for Cartesia TTS
            transcript=meditation_script,  # The meditation script generated by GPT
            voice=TtsRequestVoiceSpecifier_Id(),  # Choose the default voice or customize
            language="en",  # Language for TTS
            output_format=OutputFormat_Raw(),  # Return raw audio format
            duration=1.1  # Adjust duration if needed
        )
        
        # Collect the audio chunks returned by Cartesia's SSE stream
        audio_chunks = []
        for chunk in response:
            audio_chunks.append(chunk)
        
        # Combine the chunks into one single audio stream
        audio_data = b''.join(audio_chunks)
        
        return audio_data
    
    except Exception as e:
        print(f"Error with Cartesia TTS API: {str(e)}")
        return None


# Combine GPT-4 and Cartesia TTS in one function
def create_and_play_meditation(speed, emotion, language):
    # Step 1: Generate Meditation Script using ChatGPT
    meditation_script = generate_meditation_script(speed, emotion, language)
    print("Generated Meditation Script:")
    print(meditation_script)
    
    # Step 2: Get the meditation audio using Cartesia's TTS API
    audio_data = get_meditation_audio(meditation_script)
    
    if audio_data:
        print("Audio successfully generated. Saving to file...")
        
        # Save the audio to a file (e.g., .wav format)
        with open("meditation_audio.wav", "wb") as audio_file:
            audio_file.write(audio_data)
        
        # Here you can also return audio_data or send it to a frontend for playback
        print("Audio file saved as 'meditation_audio.wav'")
    else:
        print("Failed to generate audio.")
        
# Example: User Inputs
speed = "medium"
emotion = "calm"
language = "English"

# Create and play meditation
create_and_play_meditation(speed, emotion, language)
